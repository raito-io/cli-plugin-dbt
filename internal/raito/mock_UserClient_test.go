// Code generated by mockery v2.43.2. DO NOT EDIT.

package raito

import (
	context "context"

	schema "github.com/raito-io/sdk-go/types"
	mock "github.com/stretchr/testify/mock"
)

// MockUserClient is an autogenerated mock type for the UserClient type
type MockUserClient struct {
	mock.Mock
}

type MockUserClient_Expecter struct {
	mock *mock.Mock
}

func (_m *MockUserClient) EXPECT() *MockUserClient_Expecter {
	return &MockUserClient_Expecter{mock: &_m.Mock}
}

// GetCurrentUser provides a mock function with given fields: ctx
func (_m *MockUserClient) GetCurrentUser(ctx context.Context) (*schema.User, error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for GetCurrentUser")
	}

	var r0 *schema.User
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) (*schema.User, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) *schema.User); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*schema.User)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockUserClient_GetCurrentUser_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetCurrentUser'
type MockUserClient_GetCurrentUser_Call struct {
	*mock.Call
}

// GetCurrentUser is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockUserClient_Expecter) GetCurrentUser(ctx interface{}) *MockUserClient_GetCurrentUser_Call {
	return &MockUserClient_GetCurrentUser_Call{Call: _e.mock.On("GetCurrentUser", ctx)}
}

func (_c *MockUserClient_GetCurrentUser_Call) Run(run func(ctx context.Context)) *MockUserClient_GetCurrentUser_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *MockUserClient_GetCurrentUser_Call) Return(_a0 *schema.User, _a1 error) *MockUserClient_GetCurrentUser_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockUserClient_GetCurrentUser_Call) RunAndReturn(run func(context.Context) (*schema.User, error)) *MockUserClient_GetCurrentUser_Call {
	_c.Call.Return(run)
	return _c
}

// GetUserByEmail provides a mock function with given fields: ctx, email
func (_m *MockUserClient) GetUserByEmail(ctx context.Context, email string) (*schema.User, error) {
	ret := _m.Called(ctx, email)

	if len(ret) == 0 {
		panic("no return value specified for GetUserByEmail")
	}

	var r0 *schema.User
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*schema.User, error)); ok {
		return rf(ctx, email)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *schema.User); ok {
		r0 = rf(ctx, email)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*schema.User)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, email)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockUserClient_GetUserByEmail_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetUserByEmail'
type MockUserClient_GetUserByEmail_Call struct {
	*mock.Call
}

// GetUserByEmail is a helper method to define mock.On call
//   - ctx context.Context
//   - email string
func (_e *MockUserClient_Expecter) GetUserByEmail(ctx interface{}, email interface{}) *MockUserClient_GetUserByEmail_Call {
	return &MockUserClient_GetUserByEmail_Call{Call: _e.mock.On("GetUserByEmail", ctx, email)}
}

func (_c *MockUserClient_GetUserByEmail_Call) Run(run func(ctx context.Context, email string)) *MockUserClient_GetUserByEmail_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockUserClient_GetUserByEmail_Call) Return(_a0 *schema.User, _a1 error) *MockUserClient_GetUserByEmail_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockUserClient_GetUserByEmail_Call) RunAndReturn(run func(context.Context, string) (*schema.User, error)) *MockUserClient_GetUserByEmail_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockUserClient creates a new instance of MockUserClient. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockUserClient(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockUserClient {
	mock := &MockUserClient{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
